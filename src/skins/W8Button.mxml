<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->

<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="21" minHeight="21" alpha.disabled="0.5">
     
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
		[Style(name="bgAlpha",type="Number",inherit="no")]
		[Style(name="bgExpande",type="Number",inherit="no")]
		
        [HostComponent("spark.components.Button")]
        ]]>
		
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
			import spark.components.Group;
			import spark.filters.DropShadowFilter;
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                //useChromeColor = true;
				if (getStyle('bgAlpha')) _bgAlpha = getStyle('bgAlpha');
				if (getStyle('bgExpande')) _expand = getStyle('bgExpande');
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
				bgColor.color = getStyle("chromeColor");
                var cr:Number = getStyle("cornerRadius");
                if (cornerRadius != cr)
                {
                    cornerRadius = cr;
					bg.radiusX = cornerRadius;
                }
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            private var cornerRadius:Number = 2;
			[Bindable] private var _bgAlpha:Number=1;
			[Bindable] private var _expand:int=-3;
                                 
        ]]>        
    </fx:Script>
        
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    <s:transitions>
		<s:Transition fromState="up" toState="over">
			<s:Sequence>
				<s:Parallel>
					<s:Fade target="{bg}" alphaTo=".8"/>
					<s:Resize target="{bg}" duration="300"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		<s:Transition fromState="over" toState="*">
			<s:Parallel>
				<s:Fade target="{bg}" alphaFrom=".8"/>
				<s:Resize target="{bg}" duration="300"/>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
    <s:Rect id="bg" left="0" right="0" top="0" bottom="0" alpha="{_bgAlpha}" alpha.over=".8"
			left.over="{_expand}" right.over="{_expand}" top.over="{_expand}" bottom.over="{_expand}">
		<s:fill>
			<s:SolidColor id="bgColor" color="0xFFFFFF" />
		</s:fill>
		<s:filters.over>
			<s:DropShadowFilter alpha=".4" id="sombra" />
		</s:filters.over>
	</s:Rect>
	<s:Rect id="stroke" left="0" right="0" top="0" bottom="0"
			left.over="{_expand}" right.over="{_expand}" top.over="{_expand}" bottom.over="{_expand}">
		<s:stroke>
			<s:SolidColorStroke color="0xFFFFFF" alpha=".4"/>
		</s:stroke>
	</s:Rect>
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
    <s:Label id="labelDisplay"
             textAlign="center"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkButtonSkin>
